#!/usr/bin/env python
from PIL import Image
import glob, os, sys, getopt, argparse

# Setup the parser for creating command line flags
parser = argparse.ArgumentParser()

# Create the flags for the script
parser.add_argument('-i', '--imagedir', help='The location of the images to be resized.')
parser.add_argument('-o', '--outputdir', help='The output directory of the resized images.')
parser.add_argument('-w', '--width', help='The width of the image. The height is calculated from that number so only width is needed.', type=int)

# Parse the new flags
args = parser.parse_args()

# We are missing the -imagedir flag
if(args.imagedir == None):
    print("\u001b[31mAn image directory needs to be set with the flag -i or --imagedir.")
    print("\u001b[32mAdd the -h flag for help.")
    sys.exit()

# We are missing the -outputdir flag
if(args.outputdir == None):
    print("\u001b[31mAn output directory needs to be set with the flag -o or --outputdir.")
    print("\u001b[32mAdd the -h flag for help.")
    sys.exit()

# Make the output directory
if not os.path.exists(args.outputdir):
        print("Creating output directory: " + args.outputdir)
        os.mkdir(args.outputdir)
else:
        print("Directory: " + args.outputdir + " already exists. Moving on...")


# Search the directory for .jpg files
directory_search = glob.glob(args.imagedir + "/*.jpg")

# If no images are found, then quit
if( len(directory_search) < 1):
    print("No images where found in the given directory: " + args.imagedir)
    sys.exit()

# Loop through and resize each image found image
for i in directory_search:
    print(len(i))
    img = Image.open(i)
    height = args.width * img.size[1] / img.size[0]
    name = os.path.basename(i)
    rsz = img.resize((args.width,height))
    rsz.save(args.outputdir + "/" + name)
    print(name + " resized...")

print(" ")
print("------------------------------------")
print("Resize completed! :)")
print("------------------------------------")
print(" ")
